
####################################################/##############################################/

                  GSAC_WS Installation     

                    README, Part 2.
                      18 Mar 2015

You have completed the installation in the first README file ("Part 1"), in the GSAC code area, gsac-code/src/org/gsac/.

This README file describes how to complete your new @MACRO.PREFIX@ GSAC-WS Web Services suite, to provide web service access to site-located data in a geoscience data repository.
This file is automatically generated when you do the command 'ant makerepository' during part 1 of GSAC installation to include your new file names (but few names may be upper case where lower case is correct). 
This file sometimes uses for examples code for a hypothetical "Boulder" agency running a GPS network called "BoulderNet." You will use you own names for these.

Installation of GSAC requires some Java coding, as described below.  It is not possible for GSAC code to anticipate your database schema, field names, or what you want GSAC to do.
For more details see http://www.unavco.org/software/data-management/gsac/installation/installation.html#localcode .

This README (Part 2) file is located in your new GSAC package in @MACRO.SRCDIR@/ (ignore the README file in @MACRO.SRCDIR@/release).

The GSAC package is ready for Java 1.7 builds.  Java 1.7 is recommended for recent security features.
To build GSAC for Java 1.6, make the following changes:
   - make sure your java and javac are for Java 1.6, not Java 1.7. On Linux, do which java and which javac and make sure the versions are the same and for Java 1.6
   - see the code changes for Java 1.6 in README part 1 (you saw this already).
   - in  your local file MyServer.java find comments " code block for Java ", and un-comment those lines for Java 1.6.  Comment-out the Java 1.7 lines.
   - copy your original local GSAC code build.xml file, like boulder/gsac/build.xml, to a backup file build.xml.Java7
   - copy the prototype build file gsac-code/src/org/prototype/gsac/build.xml.Java6 to build.xml
   - in that new build.xml replace the word "prototype" in these lines:
        <property name="basename" value="prototype_gsac"/>
        <property name="repository_relative_dir" value="org/prototype/gsac"/>
        <property name="repositorypackage" value="org.prototype.gsac"/>
     with your words from the same lines in your file build.xml.Java7.  For example, you might replace org.prototype.gsac with org.myrepo.gsac.
     Also you may need to change "org." in those lines to your top level domain, such as "it.".

The main steps in README part 2 are these.  In your local GSAC code area, MACRO.SRCDIR@:

    - edit @MACRO.SRCDIR@/resources/gsac.properties
    - edit @MACRO.SRCDIR@/dbresources/gsacdb_test.properties
    - ant           (this builds GSAC with the automatic Java code, and with your properties files. There should be no errors.)
    - ant tables    (this automatically creates a Java file Tables.java which represents the schema and tables and fields in your database.)
    - edit Tables.java, mkdir database/, and move Tables.java to database/
    - ant           (this builds GSAC with the automatic Java code, Tables.java, and with your properties files. There should be no errors.) 
    - ant runserver (stop the 'ant runserver' process with CTRL-c)  (A test run of the GSAC without any executable code for your database.)
    - save copies of the orignal local subclasses of SiteManager.java and FileManager.java files, such as MySiteManager.java-orig and MyFileManager.java-orig 
    - create your subclasses of SiteManager.java and FileManager.java (creating the executable code for your GSAC, based on how you wish to use your database.)
    - ant           (build your complete new GSAC.)  If that succeeds do:
    - ant runserver (to execute your complete new GSAC on your local development platform, to can see on your browser).


Change the working directory to your local GSAC code area @MACRO.SRCDIR@ 



########################################################################
Adding Your Repository's Details: The @MACRO.SRCDIR@/resources/gsac.properties File.
########################################################################

The file @MACRO.SRCDIR@/resources/gsac.properties has a number of properties about your GSAC installation (not the database), for example, 
gsac.baseurl will be part of the full URL for your GSAC repository.

Some values were created in the initial ant build you just made.

    An example, a file boulder/gsac/resources/gsac.properties might have (be sure to start the baseurl with / ): 

    gsac.baseurl = /gsacboulder
    #Your repository name
    gsac.repository.name=Boulder GPS Repository
    #Your repository description
    gsac.repository.description=The Boulder GPS Repository 

Change the items for your GSAC repository.

The  gsac.baseurl is used in a URL to a GSAC server such as the "cddisgsac" in  http://cddis.gsfc.nasa.gov/cddisgsac/gsacapi/site/form.
It is a good idea to make a word with an acronym for identification of your agency, for example 'acrogsac'.
(The later parts of a complete GSAC URL after /acrogsac/, such as 'gsacapi/site/form' are standard and you do not enter them anywhere while installing GSAC.)

The items repository.name and repository.description are used as labels on the web site.

You optionally add this line showing the  maximum size allowed when zipping up files, e.g. 100 MB, in bytes:

    file.zip.maxsize=100000000



########################################################################
Connecting to the Database used by GSAC: edit @MACRO.SRCDIR@/dbresources/gsacdb_test.properties
########################################################################

Setting database account information: the @MACRO.SRCDIR@/dbresources/gsacdb_test.properties file.

You edit the file, @MACRO.SRCDIR@/dbresources/gsacdb_test.properties, to hold the database account details,
to permit the GSAC web server process to read from the geodesy database.  The original contents are:

    ## The properties file for the database used by a GSAC installation, and about the read-only 
    ## database account used by GSAC. Revise to show the database account GSAC will use to read from the database.  
    ## Enter the database name, account name, and account password.

    gsac.db.username=dbusername
    gsac.db.password=dbpassword

    ## Choose which kind of database JDBCURL you need, and enter the database name, account name, and account password.

    ## for Mysql, and end with  ?useUnicode=yes&characterEncoding=UTF-8
    ##      gsac.db.jdbcurl=jdbc:mysql://hostname:port/database_name?useUnicode=yes&characterEncoding=UTF-8
    ## like 
    gsac.db.jdbcurl=jdbc:mysql://localhost:3306/GSAC_Database?useUnicode=yes&characterEncoding=UTF-8

    # for Oracle 
    # gsac.db.jdbcurl=jdbc:oracle:thin:${username}/${password}@<hostname>:<port>:<database>

    #for Postgres: (please use new Java postgres support lib file)
    #gsac.db.jdbcurl=jdbc:postgresql://<hostname>/<database>


The hostname (like boulderdev.mydomain.org), port ( like 8080 or 3306), account user name and account password are specified here.  
When the GSL assembles the JDBC URL it finds the user name and password from these.  
The database must have an account GSAC can use to read from the database.  GSAC does not write to any database.


One Oracle JDBC URL is of the form: e.g:
gsac.db.jdbcurl=jdbc:oracle:thin:${username}/${password}@db1.ap.int.program.org:1521:GSACdb


(The file @MACRO.SRCDIR@/dbresources/gsacdb_production.properties is not used in GSAC code now. )


########################################################################
Initial ant build  of GSAC in your new GSAC code area
########################################################################

Check that the file build.xml, in your location @MACRO.SRCDIR@, has these lines. 
Note that the value represneted by 'gsac@MACRO.PREFIX@' below may have an upper case letter in @MACRO.PREFIX@ where the actual word in build.xml has lower case which is correct.
(The uppercase is only an artifact of the automatic generation of this README file.)

    <target name="localinit">
        <!-- base name for build products -->
        <property name="basename" value="gsac@MACRO.PREFIX@"/>

          or

        <property name="basename" value="@MACRO.PREFIX@gsac"/>

No changes are needed here unless something went wrong.  This target will be used by ant build process to make your GSAC server.  

Do the command 'ant' in @MACRO.SRCDIR@:

ant 

When the ant command succeeds you will see output to the screen something like this

compile:
    [javac] Compiling 6 source files
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
gsacjar:
     [echo] Making jar /home/wier/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder1.0.jar
     [jar] Building jar: /home/wier/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder1.0.jar
and including
war:
     [copy] Copying 1 file to /home/wier/gsac/sourceforge/gsac/gsac-code/dist
   [delete] Deleting: /home/wier/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder1.0/servlet-api.jar
      [war] Building war: /home/wier/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder.war
     [echo] ********************************
     [echo] To run the server run:
     [echo] ant runserver
     [echo] ********************************
BUILD SUCCESSFUL
Total time: 8 seconds

This 'ant' build will take about 5 to 10 seconds.

( Everytime you do "ant" to build your repository, the file myrepo/gsac/dbresources/gsacdb_test.properties
  is copied to the file myrepo/gsac/resources/gsacdb.properties
  and also copied to myrepo/gsac/resources/gsacserver.properties.
  This can be a little confusing if you attempt to keep track of the several properties files.)

The source Java (.java) files compiled are like these in @MACRO.SRCDIR@:

-rw-r--r-- 1 wier wier  1623 2013-03-04 10:13 BoulderRepository.class
-rw-r--r-- 1 wier wier  3962 2013-03-04 10:13 BoulderFileManager.class
-rw-r--r-- 1 wier wier  1408 2013-03-04 10:13 BoulderServer.class
-rw-r--r-- 1 wier wier  1355 2013-03-04 10:13 BoulderDatabaseManager.class
-rw-r--r-- 1 wier wier 17399 2013-03-04 10:13 BoulderSiteManager.class

This ant command builds GSAC for your repository, using code in @MACRO.SRCDIR@.  

It uses core GSAC (GSL) code from the jar file  gsac-code/lib/gsacws.jar.  If you change core GSAC code,
as if you do an svn update to get new core code from SourceForge for GSAC,
you must rebuild with ant in gsac-code/, and then rebuild your GSAC with ant in @MACRO.SRCDIR@.

Your ant build also creates a new Tomcat "war" file, named something like gsacboulder.war, located in gsac-code/dist/, 
which will be used as the servlet (application) container for your public web site, if you use Tomcat. 


If you happen to use two or more GSACs, doing one for one removes the .class files for the others.  So you
must do ant again for another GSAC to do ant runserver there, after doing ant in this GSAC area.

Doing ant in the core GSAC code area also removes all local GSAC .class files
so you must do ant here again.

########################################################################
Automatic Code Generation for Java reading from the Database 
########################################################################

Now run this command in @MACRO.SRCDIR@:

ant tables

Output from the ant tables command includes lines something like this:

Buildfile: build.xml
localinit:
init:
tables:
     [java] JVM args ignored when same JVM is used.
     ...
BUILD SUCCESSFUL
Total time: 2 seconds

This makes a new Java file, @MACRO.SRCDIR@/Tables.java. This file defines Java 'Tables' classes
with complete specifications for your GSAC database, one class for each database table, using GSAC Java code.

[If you see this error:
tables:
     [java] JVM args ignored when same JVM is used.
     [java] java.security.AccessControlException: access denied ("javax.management.MBeanTrustPermission" "register")
     [java]     at java.security.AccessControlContext.checkPermission(AccessControlContext.java:372)
     [java]     at java.lang.SecurityManager.checkPermission(SecurityManager.java:585)
     [java]     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.checkMBeanTrustPermission(DefaultMBeanServerInterceptor.java:1848)
     [java]     at com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.registerMBean(DefaultMBeanServerInterceptor.java:322)
you need to first do the section "Edit the Javax Security java.policy file"  in GSAC_Quick_Install.txt or in src/org/gsac/README file, the README part 1 file.
]

Edit Tables.java.  The package name in  Tables.java (at or near line 4) should be edited to end with .database: 
package org.@MACRO.PREFIX@.gsac.database;
  not the supplied value such as:
package org.@MACRO.PREFIX@.gsac;

Edit that line  to add ".database" in the end.  Do not make other changes to the file.

Make a new @MACRO.SRCDIR@/database subdirectory:

mkdir database

Move the Tables.java file into @MACRO.SRCDIR@/database:

mv Tables.java database/

Do not leave a copy of Tables.java in @MACRO.SRCDIR@/.


*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 

GSAC design notes:

Note that for every table in your database there is a class defined in Tables.java like
    public static class AGENCY 
and for every field in every database table there is a Tables.java Java variable like "operating_agency_name".

Note that for every field name in your database like "operating_agency_name" 
there is declared a Java variable with a similar name but in upper case in Tables.java 
        public static final String COL_OPERATING_AGENCY_NAME =  NAME + ".operating_agency_name";

Your .java code like BoulderFileManager.java must use those exact Java variable names found in Tables.java.

Tables.java is made from your database with command 'ant tables'. This ensures that Tables.java correctly matches your database.  
(When you compile with 'ant' then .class files like Tables$AGENCY.class are made from Tables.java.)
Do not edit Tables.java.  You need to make sure your Java code like MygsacFileManager.java has correct variable names.

So the logical progression is :
a. make your database. It need not be populated yet.
b. make Tables.java with 'ant tables.' (the previous step in these instructions) and move it to database/.
c. make your local GSAC Java code, using variable names from Tables.java.  This is explained below.
(For example, the Java files in the GSAC package at src/org/prototype/gsac/ match variables in the file src/org/prototype/gsac/database/Tables.java
which match the database schema in file Prototype15.sql.)

*** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** *** 


Build GSAC again, with 'ant' in @MACRO.SRCDIR@.  This time you should see 

compile:
    [javac] Compiling 7 source files
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
and
BUILD SUCCESSFUL
Total time: 5 seconds
 
This time ant compiles the six java files in @MACRO.SRCDIR@/, and also compiles the new Java file 'Tables.java' in @MACRO.SRCDIR@/database/.
(There are new Table$*.class files in @MACRO.SRCDIR@/database/.)  

The new Tables.java classes will eventually provide a link between your database and your GSAC code.  



########################################################################
Run a local test of your GSAC server with Tables classes.
########################################################################

So far the .java files in  @MACRO.SRCDIR@/ are only short templates. They do no read your database.  They have no code 
using  Tables class variables.  

(I recommend that your save copies of these .java files, such as with the command
cp BoulderSiteManager.java BoulderSiteManager.java-original. 
These original files may be useful later if you encounter a problem with your code and need to start over 
from the 'ant table' command. )

But that means you can build a run a new GSAC in your local GSAC code area which will run, but does not depand on corret database coding.
This is a test of all GSAC code so far, up to use of your database.

Now test the new, more complete, GSAC web server with the command:

ant runserver

This command runs a gsac@MACRO.PREFIX@ GSAC, a Java program, on your local desktop.

If there is no error, the screen output of the ant command includes a line like

     [java] Running stand-alone GSAC server at: http://localhost:8080/bouldergsac

This means your GSAC test is running at the URL shown.  The local host value, 8080, is declared in the build.xml for 
running ant runserver.  (The port  is also in the gsacrepository.sh for when running stand-alone.)

If port 8080 is already used by any other computer process,  you will see an error like
"FAILED ServerConnector@50bbaeee{HTTP/1.1}{0.0.0.0:8080}: java.net.BindException: Address already in use".
Enter a different value like 9000 in build.xml.  

In a browser on your desktop where you are developing your GSAC, look at that URL, like 

http://localhost:9000/gsac@MACRO.PREFIX@/gsacapi.  

You should see a web page with minimal content:

                    Search Sites | Search Files | Browse | Infomation | Help
    Welcome to the GSAC Repository

This shows that all the core GSAC code runs on your system.  You can look at the GSAC informational pages, such as the Information and Help links.
The 'Search' links won't do much yet.

Congratulations!  You've created the core GSAC repository package, and built a functioning (if incomplete)  GSAC server.

Stop the 'ant runserver' process with CTRL-c.  

This local test of GSAC uses Jetty, http://www.eclipse.org/jetty/, a Java HTTP server and Java servlet container.  
The Jetty servlet is for local testing, which saves the trouble of deploying a .war file to a Tomcat implementation 
(and may avoid restarting Tomcat for every test run of the new GSAC).  Public web servers often run with Tomcat in place of Jetty.

You have made an operational GSAC server which has complete core GSAC code, but which lacks specific details about your repository,
that is, where to find station and instrument metadata, and geodesy file info, in your database.
Now you need to specify those important parts of your data repository for GSAC.


########################################################################
Using Your Database by means of the Tables.java
########################################################################

GSAC must identify the tables and columns (fields) in your database,
which will be used in database queries generated by the GSAC web form searches, and by incoming requests of the GSAC API.
The Java class (in the file called Tables.java) holds all of the database table names and the tables' column (field) names.  

The Java class Tables has methods, such as the next (hypothetical) code block for a table about GPS receivers, 
with methods getName() which gives the table name, and getColumns() which returns names for fields 
in that table about GPS receivers, and which defines new String variables.

    public static class STATION extends Tables {
        public static final String NAME = "station";
        public String getName() {return NAME;}
        public String getColumns() {return COLUMNS;}
        public static final String COL_STATION_ID =  NAME + ".station_id";
        public static final String COL_FOUR_CHAR_NAME =  NAME + ".four_char_name";
        public static final String COL_STATION_NAME =  NAME + ".station_name";
        public static final String COL_LATITUDE_NORTH =  NAME + ".latitude_north";
        public static final String COL_LONGITUDE_EAST =  NAME + ".longitude_east";
        public static final String COL_HEIGHT_ELLIPS_ELEV =  NAME + ".height_ellips_elev";

You will recognize the correspondence between your database's  table names like station and your field names, such as latitude_north,
with the names GSAC uses internally, in Tables.java, such as STATION.COL_LATITUDE_NORTH. The lower case strings are the same as field names.

The GSAC forms of table and field (column) names from Tables.java will be used in new methods needed to implement your GSAC server, described below.

########################################################################
Extending Java Classes: Essential new Java Classes for your GSAC.
########################################################################

To complete your GSAC server, you need new Java code to specify particular details of your data repository.
Files in @MACRO.SRCDIR@/ have new Java code for your repository, which is the bridge between your database on one hand and GCAC core code on the other. 

It is not possible for GSAC core code to anticipate the design of data repositories, or what data types  and files are available, or what is of interest for you to
offer online in GSAC.  New code is needed to adapt GSAC to your database and possibly to other system features at your
data repository.  Users may need to correspond with UNAVCO if they want to have a successful installation. GSAC support is available
from UNAVCO at gsac-ws@unavco.org.

Your files @MACRO.PREFIX@SiteManager.java and @MACRO.PREFIX@sFileManager.java
(at least these files) must implement database queries (about geodesy data files and stations)
to your GSAC database, used by your GSAC web form searches and by the GSAC API.

The initial or template files for these Java classes automatically created in your local GSAC area of course
lack any database details (since the Tables class you just made was unknown).

########################################################################
 Using the Prototype GSAC db design
########################################################################

If you use the Prototype GSAC db design, the GSAC package now (Oct 25 2013) includes prototype Java files which will probably make a working GSAC installation with little Java coding.

Replace your new files @MACRO.PREFIX@SiteManager.java and @MACRO.PREFIX@sFileManager.java with these two "Prototype" files,  from in your GSAC package:

gsac-code/src/org/prototype/gsac/PrototypeSiteManager.java
gsac-code/src/org/prototype/gsac/PrototypeFileManager.java

Change them to fit into your GSAC code:
- rename them both, replacing Prototype in the file names with with your file name part, something like Boulder.
- in the files change all uses of Prototype in Java class and method names using your file name part to replace Boulder.
- replace the lines
package org.prototype.gsac;
import  org.prototype.gsac.database.*;
with
package org.myrep.gsac;
import  org.myrep.gsac.database.*;
using whatever your short name is, in place of myrep.

Also see notes below about SiteManager.java and FileManager.java.

Then test your new GSAC, using the commands "ant" (to compile), and if that succeeds, do "ant runserver" to
try your GSAC on your local development platform. (You can combine these two ant processes into one: "ant compile build" which only succeeds if there are
no errors in the compile step.)

Stop ant runserver with CTRL-C.

If the ant build has errors they will hopefully show where is the disconnect between your database (represented by Tables classes) and
your new  PrototypeSiteManager.java and PrototypesFileManager.java files, by naming variable names in the Java code (like COL_NETWORKS) not found in your Tables classes and java file.

########################################################################
 Using Other Databases
########################################################################

If you are using your own database schema, first compare its schema to the prototype GSAC database schema.
Then modify copies of the files PrototypeSiteManager.java and PrototypesFileManager.java
to get GSAC to work with your database. You will be changing, at least, database names of tables and fields: see the Java file Tables.java you made.
Probably you will rewrite the SQL queries, and how query results are habdled for GSAC use. This will be the most demanding part of GSAC installation.

########################################################################

The file @MACRO.PREFIX@Repository.java 

The @MACRO.PREFIX@Repository class is the main entry point. 

Above the import lines, be sure there is correct new Java package name, something like this:

package org.@MACRO.PREFIX@.gsac; 

which is of course dependent on your choice of name for your Java GSAC pacakge.

In the method initResourceManagers(), make the choice if you want your GSAC repository to
search on sites (stations or monuments), for data files, or for both:
 
  public void initResourceManagers() {
        // Use this line to search on BOTH sites and data files in the metadata.
        super.initResourceManagers();

        // If you only want searches for sites,  uncomment this
        //getResourceManager(GsacSite.CLASS_SITE);

        // If you only want searches for files,  uncomment this
        // getResourceManager(GsacFile.CLASS_FILE);
    }

                     ########################################################################

The file @MACRO.PREFIX@SiteManager.java  

This file specifies how GSAC searches for sites, and what information is returned to the user.  

You will see a template file for @MACRO.PREFIX@SiteManager.java which was initially created automatically by the GSAC build process.

A GSAC programmer needs to know Java and have an understanding of database concepts and queries, and in the process of
writing new code for GSAC will learn about GSAC core code.

First, above the "import" lines, check the new Java package name, in this form:
package org.@MACRO.PREFIX@.gsac;
such as package org.igs.gsac;  which is in the IgsSiteManager.java.

Make sure you have a line like
import org.@MACRO.PREFIX@.gsac.database.*;  
such as import org.igs.gsac.database.*;

Most of the work is in created the methods 

    public List<Capability> doGetQueryCapabilities()

    public GsacResource getResource(String resourceId)

    public List<Clause> getResourceClauses ()

You write Java code to specify which database items you will query on in the GSAC search forms, and Java code to do  queries to extract
addtitional values from the database, values not used in queries but required for the GSAC results, such as receiver firmware version number.


                     ########################################################################

The file @MACRO.PREFIX@FileManager.java 

This file specifies how GSAC searches for data files, and what is returned to the user.  

You will see a template file for @MACRO.PREFIX@FileManager.java which was initially created automatically by the GSAC build process.

You need not modify this file if you do not supply a data file download service.  In that case, 
in @MACRO.PREFIX@Repository.java use only getResourceManager(GsacSite.CLASS_SITE) in initResourceManagers().

Above the import lines, be sure the Java package name is correct, in this form:

package org.@MACRO.PREFIX@.gsac;

(You may have other top level package name than org.)

You need to include your database classes:

import org.@MACRO.PREFIX@.gsac.database.*;

GSAC FileManagers usually allow searches for files associated with sites where files were recorded. The FileManager uses help from the SiteManager 
class to do this.


########################################################################
Web Site Page Contents, Header, Footer, and Images 
########################################################################

You can specify details of the header and footer used on GSAC web pages, and the home page contents.

Installing  GSAC initially creates a short version of its web site home page which says only "Welcome to GSAC." 
You can add more to this file for a larger page, using normal HTML.  You can also create HTML code for a header and a footer 
which will be used at the top and bottom of all the web pages in your GSAC site.

The contents of a home page of a GSAC repository web site is contained in an index.html file.
In your GSAC code area, use mkdir htdocs to create htdocs/ in @MACRO.PREFIX@/gsac/ (src/org/@MACRO.PREFIX@/gsac/htdocs/).
Into @MACRO.PREFIX@/gsac/htdocs copy the template file index.html from src/org/prototype/gsac/htdocs/index.html.
Into @MACRO.PREFIX@/gsac/htdocs also copy from src/org/prototype/gsac/htdocs/ the files GSAC_logo2.jpg, GSAC_logo2_short.jpg, and GSAC_logo2_small.jpg.

Edit your htdocs/index.html file to create your GSAC home page contents.  Put image files used on the web main page in the directory htdocs.
Note that the index page does not have a complete set of HTML lines, found on a typical web page, 
including <html> at the beginning, or the final </html>, since the index contents
are wrapped inside the GSAC header and footer HTML files, mentioned next.

In the index.html file, add images with HTML like <img src="@MACRO.PREFIX@/gsacapi/htdocs/stations_map.png">
As usual in HTML, images also may be retrieved from a URL, for example <img src="http://www.nasa.gov/images/gps_satellite.gif">.

The files footer.html and header.html, in the directory @MACRO.SRCDIR@/resources/, specify the top and bottom of the 
GSAC web pages.  Copy the template files src/org/prototype/gsac/resources/header.html and src/org/prototype/gsac/resources/footer.html to your @MACRO.PREFIX@/gsac/resources.
These files may be as simple, or fully developed, such as using css. To include an image in the header and footer html files
use <img  src="${htdocs}/home-page-header_1.jpg" >. All web page image files are in directory htdocs/.
Include an email address for Contact or Support in your header or footer.  If persons using your GSAC have
questions, they need an easy way to reach you. 

The GSAC web pages with search forms, and pages with static GSAC information such as the GSAC Help pages,
are provided by GSAC. They also use your header and footer HTML files.  Is it possible to modify the GSAC search forms 
with Java programming in the core GSAC code, but we urge you to write to UNAVCO if you see need for a change.  For consitency with
other GSAC repositories, and for problem-free operation in a federated GSAC, it is best not to modify core GSAC code.


########################################################################
GSAC's Format Choices for Query Results
########################################################################

GSAC offers several choices for formats of the results of queries.  For example, on any GSAC web site, 
either open the Information page's Output types list - click on [+] - or in a Search form, open the Results [+] area
and then the Output: menu.

GSAC now offers results in these formats:

Site Outputs
HTML    output=site.html
SINEX sites info    output=site.snx
GAMIT station.info  output=site.station.info
Google Earth KMZ    output=site.kmz
SOPAC XML Site Log  output=site.xmllog
GSAC Sites info, JSON   output=site.json
GSAC Sites info, short csv  output=site.csv
GSAC Sites info, full csv   output=sitefull.csv
GSAC Sites info, Ops XML    output=siteops.xml
GSAC Sites info, RSS    output=site.gsacrss
GSAC Sites info, text   output=site.plaintext

File Outputs
File HTML   output=file.html
Wget Script for FTP download    output=file.wget
File URLs list  output=file.url
File CSV    output=file.csv
File JSON   output=file.json
Zip Files   output=file.zip
File GSAC RSS   output=file.gsacrss
File GSAC XML   output=file.gsacxml

(The terms output=... are the result format arguments in GSAC API queries.)

GSAC offers both a short csv (comma separated value) file formats with only 
site name and location, and a full csv file with lots of geodesy site data.
The GSAC plain text format is for quick visual inspection of the site values 
available (not intended for computer processing).

If you are satisfied with your GSAC repository offering these formats, 
you need do nothing about output format choices. Go to the next topic.

The choices of what to show in GSAC are set in the file gsac-code/src/org/gsac/gsl/SiteManager.java. 

You may very easily NOT offer some formats, if you don't want to offer them.  Comment out lines for handlers, in gsac/gsl/SiteManager.java,  NOT wanted your GSAC-WS repository.
For example if you do not want to provide the GSAC "Short csv" format, comment out (put // before) 
new TextSiteLogOutputHandler(getRepository(), getResourceClass()) in the file gsac-code/src/org/gsac/gsl/SiteManager.java. 

However you are encouraged to allow all the GSAC format choices, to show consistent results with other GSACs and in Federated GSAC collections.
There is no harm in offering all the choices .  Even if you do not see much use in some format, others may be expecting it from a GSAC service.

To conform with other GSAC repositories it may be good not to revise any GSAC-supplied output format.  
For GSAC bug reports and suggested improvements about formats please contact UNAVCO.

You could, alternately, make a new and similar but altered 
handler .java class for your use.  Add its call to the class file SiteManager.java and rebuild GSAC.  Do not commit your core 
GSAC code changes in thsi case into GSAC without consulting UNAVCO.

Please do *not* do svn commit into SourceForge for any modified SiteManager.java file or output handler, if you have SourceForge write permission.

GSAC does not promote, endorse, deprecate or modify file formats (except possibly for changes to GSAC's own formats).  
If there is another format which you think GSAC should offer, you can contact UNAVCO 
to add it to GSAC code.  

You can create a new "OutputHandler" Java class and use it yourself or submit it to UNAVCO to add to GSAC.
You create a new kind of format by writing a new Java class, similar to any of the above output handlers.
The Java output handler source files are in gsac-code/src/org/gsac/gsl/output/site/.  You can use the current output handler classes as
guides to what is needed in a similar Java class.  Remember to call it in gsl/SiteManager.java and rebuild everything.

########################################################################
Dealing with Elevation and Ellipsoid Height
########################################################################

GSAC code assumes station height values are ellipsoid heights above a geoid model surface, 
the heights for locations in terrestrial reference frames, including GNSS positions.

Usually you need do nothing to GSAC about "elevations" to handle your geodesy data.

If your location values are true elevations instead of ellipsoid heights above a geodi model, you can change these lines in these files in core GSAC code to 
change output labels with "ellipsoid height" to "elevation":

Look for lines in the files with "// About ellipsoidal height:"

gsl/output/GsacOutputHandler.java:               // About ellipsoidal height:
gsl/output/HtmlOutputHandler.java:            // About ellipsoidal height:
gsl/output/site/CsvFullSiteOutputHandler.java:        // About ellipsoidal height:
gsl/output/site/PlainTextSiteOutputHandler.java:        // About ellipsoidal height:
gsl/output/site/SinexSiteOutputHandler.java:        // About ellipsoidal height:
gsl/output/site/SinexSiteOutputHandler.java:        // About ellipsoidal height:
gsl/output/site/XmlSiteLogOutputHandler.java:        // About ellipsoidal height:

Then rebuild core GSAC with command ant in gsac-code/, and rebuild your GSAC instance with ant in your boulder/gsac/ file area.

Note that the geodesy formats SINEX, GAMIT station.info, and SOPAC XML Site Log do not have a choice of two labels to 
distinguish ellipsoid height from elevation. In those cases you may need to force zero for ellipsoid heights if you lack that data.

For example SINEX has a parameter "_APP_H_" and SOPAC XML Site Log has a parameter "<mi:elevation-m_ellips> </mi:elevation-m_ellips>".

Due to conventions in geodesy, ellipsoid heights are better than elevations for GSAC.

########################################################################
Building and Running the GSAC server
########################################################################

Once you have made the additions to the Java code, to build your GSAC, in @MACRO.SRCDIR@, run simply:

 ant 

The ant target builds a .zip of a stand-alone gsac server in gsac-code/dist/  
and generates a Tomcat war file  gsac-code/dist/gsac@MACRO.PREFIX@.war.

To run the server, do:

 ant runserver

This will run a test or demo version of your GSAC on your desktop, with Jetty doing the web page management.

To see the new GSAC, in the runserver screen output is a line such as

     [java] GSAC INFO: Wed Dec 12 10:18:46 MST 2012: GsacServlet: url:http:/hostname:8080/gsacboulder/gsacapi

Enter the "http:/hostname:8080/gsacboulder/gsacapi" part in a browser URL address window on the same machine to see your new GSAC.

The display is handled by Jetty.


########################################################################
Hiding DB account info
########################################################################

If you have some database authentication you need to use (or any other properties), 
but don't want to check in with the properties files (into SourceForge or other svn), 
you can create a org/@MACRO.PREFIX@/@MACRO.BASENAME@.properties file. The contents are two lines:
gsac.db.username=your-db-account-name
gsac.db.password=your-db-account-password

The ant runserver command implicitly uses this property file as a command line argument.
When running in production the servlet will look for such a properties file under Tomcat/conf/<rootname>.properties
So, for example, for a 'gsacboulder' server,  it looks for a gsacboulder.properties file. 
Put the authentication information in that properties file so it's not checked into any svn.


########################################################################
Running the new GSAC web site with Tomcat
########################################################################

Apache Tomcat is a Java servlet container to power web applications. See http://tomcat.apache.org/.

Building GSAC (in the src/org/demo/gsac directory, run ant) makes a Tomcat .war file in the dist/ folder: 

 gsac-code/dist/gsacDemo.war.   

Copy this file to the Tomcat folder for .war file folder on your web server host.  For example, 
on the Tomcat server, do something like

cp gsacDemo.war /usr/local/apachetomcat/webapps

The GSAC server web should be available in a few seconds if you are using "hot deploy," without a restart of Tomcat.
    
You can see the log of Tomcat actions by doing for example,

 tail -f /usr/local/apachetomcat/logs/catalina.out
    
If for some reason Tomcat and hotdeploy are misbehaving, or to restart Tomcat, you can do:

sudo /etc/init.d/tomcatdev stop
sudo /etc/init.d/tomcatdev start

to restart tomcat  and force a read of the .war files.

The Tomcat's servlet reads the properties file:
/usr/local/apachetomcatdev/conf/gsacigs.properties
which contains the database authentication info. This is in the .war file.

########################################################################
########################################################################

