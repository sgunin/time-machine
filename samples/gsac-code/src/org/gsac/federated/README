
          How to install a Federated GSAC web services server
                        25 March 2014

To learn about what are GSAC web services and federated GSACs, see the UNAVCO GSAC web site at http://www.unavco.org/software/data-management/gsac/gsac.html.

Installing a federated GSAC is much simpler than installing GSAC for a data repository. 
You do not use a database for a federated GSAC.  
(Do not refer to the default file README in src/org/gsac/federated/.)

If you have not already installed GSAC in any way, do "1.  Install the GSAC package" below. 

Otherwise do svn update for your GSAC again, unless you just did step 1 or did a GSAC svn update after 12 Mar 2014, 
to get the most recent code for federated GSACs.

Then go to step 2.

###########################################   ###########################################

1.  Install the GSAC package.

First Read "Installing GSAC Web Services -- System Requirements" in the UNAVCO GSAC web site.
Installation uses Linux OSs, Java compilation, subversion (svn) and 'ant' the Java build tool.

Install GSAC core code, as described in the GSAC web site, repeated here:

    GSAC has a set of core Java code (the "GSAC Service Layer," or GSL) and related files.

    You download the GSAC code package from SourceForge, and compile it without making any changes to it.  

    Get GSAC from SourceForge:

    Choose or make a top-level working directory for GSAC, and go there. For example:

mkdir ~/GSAC/

cd    ~/GSAC/

    Check out the GSAC code from SourceForge by entering this command:

svn export svn://svn.code.sf.net/p/gsac/code/trunk gsac-code

    (to find this command at SourceForge, go to https://sourceforge.net/projects/gsac/,
      and click on the 'Code' menu item in the 'Summary Files ...' menu line.)

    (svn *export* simply downloads all the files for the project, with no revision control permission required.  
     svn checkout is used if you have a developer's role, to check in new code to GSAC on SourceForge.)

    The svn command creates a new folder named gsac-code, and creates many folders in it, and downloads about 650 to 700 files from GSAC at SourceForge.

    Build the GSAC core code.

cd ~/GSAC/gsac-code/

    Do an initial ant build with the command:

ant

    This process sends information to the screen, like "gsl: Building GSL", and takes about 30 to 60 seconds.
    The final lines from a successful build are like:

localinit:
init:
war:
   [copy] Copying 1 file to /home/dev/GSAC/gsac-code/dist
   [delete] Deleting:       /home/dev/GSAC/gsac-code/dist/gsacea1.0/servlet-api.jar
   [war] Building war:      /home/dev/GSAC/gsac-code/dist/gsacea.war
BUILD SUCCESSFUL
Total time: 36 seconds

    Look for any error messages.  If there are none, you have completed the GSAC core code.  

    This process makes a Java jar file, named gsacws.jar, in GSAC/gsac-code/lib/, with size about 5 MB.
    This file "contains" the built and executable GSAC core code, in effect.  This jar file will be used to build your final Java jar file for your complete GSAC server code.

    End of part 1, installation of GSAC core code.

###########################################   ###########################################

2. Specify connections to remote GSACs.

Go to the gsac/federated/ directory in your GSAC package, for example, something like  ~/GSAC/gsac-code/src/org/gsac/federated/.  
The files to make a federated GSAC are here.

Edit the file resources/gsacserver_test.properties to specify the values for the remote GSAC to use.  Lines beginning with # are comments.

    # For a federated GSAV, specify remote GSACs to use, and your GSAC's host.
    # (This file gsacserver_test.properties gets copied to gsacserver.properties when you do ant.)

    # Set the host name and port for the repository (your local server info, where your GSAC will run):
    gsac.server.hostname=www.unavco.org
    gsac.server.port=80

    # For the remote GSACs to connect to, specify:
    #gsac.federated.servers=                                     A comma-separated list of the remote GSACs (your own names, for use in this file only)
    #gsac.federated.<id>.url=                                    A known URL for a remote GSAC, or the "Base URL" from the Infomation page on each remote GSAC web site (which can in some cases be incorrect).
    #gsac.federated.<id>.name=name                               To show this name on your federated GSAC, a name for a remote GSAC repository 
    #gsac.federated.<id>.icon=url                                To link to small icon for that remote repository. Will be used inside web page tables of results, so a height < 50 pixels is good.

    # examples (URLS shown are non-working):

    gsac.federated.servers=geoazur,noanet

    gsac.federated.geoazur.url=http://epos.unice.fr/renagbgsac
    gsac.federated.geoazur.name=Geoazur GPS Repository
    gsac.federated.geoazur.icon=https://geoazur.oca.eu/IMG/png/OCA.png

    gsac.federated.noanet.url=http://gsac-hp-workstation-xw6200/gsacnoanet
    gsac.federated.noanet.name=NOANET GPS Repository
    gsac.federated.noanet.icon=http://www.gein.noa.gr/services/GPS/NOA_GPS/noa_gps_files/images/temp/sample-post-1.jpg

Ignore the file resources/gsacserver_production.properties.

###########################################   ###########################################

3. Edit HTML files for your federated GSAC web pages.

Edit gsac/federated/resources/header.html to create your GSAC web page header.
Images are kept in gsac/federated/resources/htdocs.

Edit the file gsac/federated/htdocs/index.html, which has contents of the web site home page.

There is a default HTML footer file gsac/federated/resources/footer.html, for your GSAC web pages.
You may change it, if you wish to.

The FederatedSiteManager.java and FederatedResourceManager.java files should NOT be changed. 
Make no changes to any Java files in gsac/federated/.


###########################################   ###########################################

4. Build and Deploy GSAC.

To build  your federated GSAC, do

ant

in gsac/federated/.

This ant command will copy resources/gsacserver_test.properties to resources/gsacserver.properties.


The customary GSAC installation testing command "ant runserver" will usually fail because it cannot connect to remote GSACs.

You can deploy the federated GSAC on a web server to test it.

The ant build makes a Tomcat war file in your GSAC dist/ directory, such as:

GSAC/gsac-code/dist/gsacfederated.war

To see the exact path, look in the ant build screen output for a line like this:

    [war] Building war: /home/dev/GSAC/gsac-code/dist/gsacfederated.war

Copy the gsacfederated.war file to your Tomcat server, in the Tomcat area, such as

/usr/local/apachetomcat/webapps/

If you use HotDeploy the new GSAC server will be deployed and the federated GSAC will be available.
Without Hotdeploy you will need to restart the Tomcat service.

Your federated GSAC URL will have a Base URL something like http://www.boulder.org/gsacfederated.


end of README_GSAC_Federated_Installation

###########################################   ###########################################

