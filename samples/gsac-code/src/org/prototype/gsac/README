####################################################################### #######################################################################

                                      Using Prototype GSAC Code to make Your GSAC     

                                                   README, Part 2.

                                               Feb 29, 2016  Stuart Wier  UNAVCO


If you use the Prototype15 GSAC database (the Prototype15_GSAC.sql files is in the GSAC package) you can build a working GSAC with no new JAVA code.
The Prototype GSAC code is ready to use, after some small code changes for your repository.
You use code and directories beginning at gsac-code/src/org/prototype/.  For your own GSAC you do not need to rename
any of these files and directories.  The word "prototype" will not appear in public use of your GSAC, even though you use files including
for example ProtptypeSiteManager.java.  You will edit some properties files and some HTML for your GSAC's details.


You have completed the installation in the first README file ("Part 1"), in the GSAC code area, gsac-code/src/org/gsac/.
This README (Part 2) file is located in the "prototype GSAC code area", src/org/prototype/gsac/.

This file has, for examples, a hypothetical "Boulder" agency running GSAC.  You will use your own agency's name.

The GSAC package is ready for Java 1.7 builds.  Java 1.7 is recommended for recent security features.  

To build GSAC for Java 1.6, make the following changes:
   - make sure your java and javac are for Java 1.6, not Java 1.7. On Linux, do which java and which javac and make sure the versions are the same and for Java 1.6
   - see the code changes for Java 1.6 in README part 1 (you saw this already).
   - in PrototypeServer.java find comments " code block for Java ",  un-comment the lines for Java 1.6, and comment-out the Java 1.7 lines.
   - copy the file gsac-code/src/org/prototype/gsac/build.xml.Java6 to build.xml

The main steps in this GSAC README part 2 are these.

    - edit src/org/prototype/gsac/resources/gsac.properties
    - edit src/org/prototype/gsac/dbresources/gsacdb_test.properties
    - edit the web page HTML files.
    - ant           (this builds GSAC with your properties files. There should be no errors.)

    - deploy GSAC war file to Tomcat

You can test your gsac on your desktop with
    - ant runserver 
to execute and test your complete new GSAC on your local development platform, on your browser.
Stop ant runserver with CTRL-c.


########################################################################

Adding Your Repository's Details: The "GSAC Properties" File.

The file org/prototype/gsac/resources/gsac.properties has 3 properties about your GSAC installation (not the database), for example, 
gsac.baseurl will be part of the full URL for your GSAC repository.

Some values were created in the initial ant build you just made.

An example, a file boulder/gsac/resources/gsac.properties might have (be sure to start the baseurl with / ): 

    ##what is the base url used; this appears in the GSAC URL, like http://mydomain.org/prototypegsac/
    gsac.baseurl = /bouldergsac

    # used on the highlighted label line near top of the 'Information' web page, and perhaps used in some product files like (?) Sinex, GAMIT, full csv formats.
    # Enter your agency name between The    and    GSAC
    gsac.repository.name=The Boulder GSAC Repository

    # used on text line near top of the 'Information' web page 
    # Enter your agency name between  the         and                   Repository
    gsac.repository.description=GSAC Web Services for the Boulder Repository


Change the items for your GSAC repository.

The  gsac.baseurl is used in a URL to a GSAC server such as the "gsacws" in  http://cddis.gsfc.nasa.gov/gsacws/gsacapi/site/form.
Replace 'prototypegsac' with an acronym for identification of your agency, for example 'acrogsac'.

The items repository.name and repository.description are used as labels on the web site.

Comment out this limit on zip file max size, unless you need it:
#    file.zip.maxsize=100000000

########################################################################

Adapt build.xml.

Edit this line in build.xml:

  <property name="basename" value="prototype_gsac"/>

changing 'prototype' to something like

  <property name="basename" value="bouldergsac"/>

This will make your Tomcat .war file named bouldergsac.war.

This new word should match the baseurl word or value in gsac/resources/gsac.properties .


########################################################################

Connecting to the Database used by GSAC

The database must have an account GSAC can use to read from the database.  (GSAC does not write to any database.)
You code the file, org/prototype/gsac/dbresources/gsacdb_test.properties, to hold the database account details,
to permit the GSAC web server process to read from the geodesy database.  The contents are like:

    ## This is the file dbresources/gsacdb_test.properties, which specifies the database used by GSAC, and the db account to use.

    gsac.db.username=db_acct_name
    gsac.db.password=db_acct_pw

    gsac.db.jdbcurl=jdbc:mysql://localhost:3306/Prototype15_GSAC?useUnicode=yes&characterEncoding=UTF-8

    #gsac.db.jdbcurl=jdbc:oracle:thin:${username}/${password}@<hostname>:<port>:Prototype15_GSAC
    #gsac.db.jdbcurl=jdbc:postgresql://<hostname>/Prototype15_GSAC


The db account name, db account password,  database name (Prototype15_GSAC), db host (like localhost or boulderdev.mydomain.org), and port (8080) are all given.  
When the GSL assembles the JDBC URL it finds the user name and password from these.  

The Oracle and Postgres have different syntax for the 'jdbc' line in this filex, as shown.  Also for Postgres the form is 

=jdbc:postgresql://<hostname>:<port>/<database>.  

One Oracle JDBC URL is of the form:

=jdbc:oracle:thin:${username}/${password}@<hostname>:<port>:<database>, 
   e.g:
=jdbc:oracle:thin:${username}/${password}@db1.ap.int.program.org:1521:gpsdb

(The file org/prototype/gsac/dbresources/gsacdb_production.properties is not used now. It can be empty.)

Everytime you do "ant" to build your repository, the file
   myrepo/gsac/dbresources/gsacdb_test.properties
is copied to the file
   myrepo/gsac/resources/gsacdb.properties
and also copied to
   myrepo/gsac/resources/gsacserver.properties.

This can be a little confusing if you attempt to keep track of the several properties files.


########################################################################

Compile GSAC in your new GSAC code area.

    In org/prototype/gsac, save backup copies of PrototypeSiteManager.java and PrototypeFileManager.java

    Do the command 'ant' in org/prototype/gsac: 

ant 

    When the ant command runs you will see output to the screen something like this

compile:
    [javac] Compiling 7 source files
    [javac] Note: Some input files use unchecked or unsafe operations.
    [javac] Note: Recompile with -Xlint:unchecked for details.
gsacjar:
     [echo] Making jar /home/wier/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder1.0.jar
     [jar] Building jar: /home/wier/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder1.0.jar
and including
war:
     [copy] Copying 1 file to /home/wier/gsac/sourceforge/gsac/gsac-code/dist
   [delete] Deleting: /home/wier/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder1.0/servlet-api.jar
      [war] Building war: /home/wier/gsac/sourceforge/gsac/gsac-code/dist/gsacboulder.war
     [echo] ********************************
     [echo] To run the server run:
     [echo] ant runserver
     [echo] ********************************
BUILD SUCCESSFUL
Total time: 8 seconds

This 'ant' build will take about 5 to 10 seconds.

The source Java (.java) files compiled are like these in org/prototype/gsac

-rw-r--r-- 1 wier wier  1623 2013-03-04 10:13 PrototypeRepository.class
-rw-r--r-- 1 wier wier  3962 2013-03-04 10:13 PrototypeFileManager.class
-rw-r--r-- 1 wier wier  1408 2013-03-04 10:13 PrototypeServer.class
-rw-r--r-- 1 wier wier  1355 2013-03-04 10:13 PrototypeDatabaseManager.class
-rw-r--r-- 1 wier wier 17399 2013-03-04 10:13 PrototypeSiteManager.class
-rw-r--r-- 1 wier wier  1768 2013-03-04 10:13 database/Tables.class

This ant command builds GSAC for your repository

It uses core GSAC (GSL) code from the jar file  gsac-code/lib/gsacws.jar.  If you change core GSAC code,
as if you do an svn update to get new core code from SourceForge for GSAC,
you must rebuild with ant in the top level directory, gsac-code/, and then rebuild your GSAC with ant in gsac-code/src/org/prototype/gsac.

Your ant build also creates a new Tomcat "war" file, named something like bouldergsac.war, located in gsac-code/dist/, 
which is the "servlet (application) container" for your public web site, if you use Tomcat. 

(If you happen to use two or more GSACs, doing 'ant' one for one removes the .class files for the others.  So you
must do ant again for another GSAC to do ant runserver there, after doing ant in this GSAC area.)
Doing ant in the core GSAC code area src/org/gsac/ also removes all local GSAC .class files
so you must do ant in src.org/prototype/gsac/ again to make a new prototype GSAC war file.


CAUTION:
If you later do "svn update" in your GSAC code area, svn will put a copy of the Tables.java file in org/prototype/gsac/ where it does not belong.
If you then try "ant" in org/prototype/gsac/ a compile error is made.  Remove the Tables.java file from org/prototype/gsac/ and do "ant" again.
Tables.java must be ONLY in org/prototype/gsac/database.


########################################################################

Run a local test of your GSAC server


Now test the GSAC web server with the command:

ant runserver

This command runs a Prototype GSAC, on your local desktop where you are developing your GSAC.  

Screen output of the ant command includes a line like

GSAC INFO: Tue Aug 28 14:33:59 EDT 2013: GsacServlet: url:http://mycpuname:8080/bouldergsac/gsacapi

   or 

     [java] Running stand-alone GSAC server at: http://localhost:8080/bouldergsac

This means your GSAC test is running at the URL shown.  The local host value, 8080, is declared in the build.xml for 
running ant runserver.  If you already use 8080 for another purpose, enter a different value in build.xml.  It is 
also in the gsacrepository.sh for when running stand-alone.

In a browser on your desktop where you are developing your GSAC, look at that URL, like 

http://localhost:8080/bouldergsac/  

You should see a new web page with minimal content:

                    Search Sites | Search Files | Browse | Infomation | Help
    Welcome to the GSAC Repository

This shows that all the core GSAC code runs on your system.  You can look at the GSAC informational pages, such as the Information and Help links.
The 'Search' links won't do much yet.

Congratulations!  You've built a new GSAC server.

Stop the 'ant runserver' process with CTRL-c.  

This local test of GSAC uses Jetty, http://www.eclipse.org/jetty/, a Java HTTP server and Java servlet container.  
The Jetty servlet is for local testing, which saves the trouble of deploying a .war file to a Tomcat implementation 
(and may avoid restarting Tomcat for every test of the new GSAC).  Public web servers often run with Tomcat in place of Jetty.

You have made an operational GSAC server which has complete core GSAC code, but which lacks specific details about your repository,
that is, where to find station and instrument metadata, and geodesy file info, in your database.
Now you need to specify those important parts of your data repository for GSAC.


########################################################################

Making a new database and its new Tables.java file.

If you make a new database schema, you will need to make a new Tables.java file in your local (prototype/gsac/) area.

in prototype/gsac/:

Do this:
1. You did save your very first original files PrototypeFileManager.java and PrototypeSiteManager.java to backup copies?
2. do ant clean
3. edit  dbresources/gsacdb_test.properties to use the new name of the new database
4. rm -rf database/
5. use the backup original files for PrototypeFileManager.java and PrototypeSiteManager.java.
6. ant
7. ant tables [this makes a new file Tables.java in prototype/gsac/]
8. mkdir database/
9. edit Tables.java in prototype/gsac/ to have line 3 become  package org.prototype.gsac.database;
10. mv Tables.java  prototype/gsac/database/
11. ant
12. replace your complete working files for PrototypeFileManager.java and PrototypeSiteManager.java
13. ant
14. test with ant runserver


########################################################################

Web Site Page Contents, Header, Footer, and Images 


You create the header and footer used on GSAC web pages, and the home page contents.

The contents of a home page of a GSAC repository web site is contained in  prototype/gsac/htdocs/index.html file.
There is already a template index.html 

Edit your htdocs/index.html file to create your GSAC home page contents.  Put image files used on the web main page in the directory htdocs.
Note that the index page does not have a complete set of HTML lines, found on a typical web page, 
including <html> at the beginning, or the final </html>, since the index contents are wrapped inside the GSAC header and footer HTML files, mentioned next.

In the index.html file, add images with HTML like <img src="prototype/gsacapi/htdocs/COCONet_stations_map.png">
As usual in HTML images also may be retrieved from another web server with any URL, for example, with <img src="http://www.nasa.gov/images/gps_satellite.gif">.

The files footer.html and header.html, in the directory prototype/gsac/resources/, specify the top and bottom of the GSAC web pages.
These files may be simple, or fully developed such as using css. To include an image in the header and footer html files
use <img  src="${htdocs}/home-page-header_1.jpg" >. All web page image files are in your htdocs/ directory.

The design, layout, and content of GSAC web pages with search forms, and pages with static GSAC information such as the GSAC Help pages,
are provided by GSAC, with use your header and footer.  Is it possible to modify the GSAC search forms 
with Java programming in the core GSAC code, but we urge you to write to UNAVCO if you see need for a change.  For consistency with
other GSAC repositories, and for problem-free operation in a federated GSAC, it is best not to modify core GSAC code.


########################################################################

Running the GSAC server in Tomcat and Jetty

The ant  builds a .zip of a stand-alone gsac server in gsac-code/dist/  and generates a Tomcat war file  gsac-code/dist/bouldergsac.war.

To run the server with Jetty do:

 ant runserver

This will run a test or demo version of your GSAC on your desktop, with Jetty doing the web page management.

To see the new GSAC, in the runserver screen output is a line such as

     [java] GSAC INFO: Wed Dec 12 10:18:46 MST 2012: GsacServlet: url:http:/hostname:8080/bouldergsac/gsacapi

Enter the "http:/hostname:8080/bouldergsac/gsacapi" part in a browser URL address window on the same machine to see your new GSAC.

The display is handled by Jetty.


Apache Tomcat is a Java servlet container to power web applications. See http://tomcat.apache.org/.

Building GSAC (in the src/org/prototype/gsac directory, run ant) makes a Tomcat .war file in the dist/ folder: 

 gsac-code/dist/bouldergsac.war.   

Copy this file to the Tomcat folder for .war file folder on your web server host.  For example, on the Tomcat server, do something like

cp bouldergsac.war /usr/local/apachetomcat/webapps

The GSAC server web should be available in a few seconds if you are using "hot deploy," without a restart of Tomcat.
    
You can see the log of Tomcat actions by doing for example,

 tail -f /usr/local/apachetomcat/logs/catalina.out
    
If for some reason Tomcat and hotdeploy are misbehaving, or to restart Tomcat, you can do:

sudo /etc/init.d/tomcatdev stop
sudo /etc/init.d/tomcatdev start

to restart tomcat  and force a read of the .war files.

The Tomcat's servlet reads the properties file: /usr/local/apachetomcatdev/conf/bouldergsac.properties
which contains the database authentication info. This is in the .war file.

When running in production the servlet will look for such a properties file under Tomcat/conf/<rootname>.properties
So, for example, for a 'gsacboulder' server,  it looks for a gsacboulder.properties file. 
Put the authentication information in that properties file so it's not checked into any svn.


########################################################################
GSAC's Format Choices for Query Results
########################################################################

GSAC offers several choices for formats of the results of queries.  For example, on any GSAC web site, 
either open the Information page's Output types list - click on [+] - or in a Search form, open the Results [+] area
and then the Output: menu.

GSAC now offers results in these formats:

Site Outputs
HTML                        output=site.html
SINEX sites info            output=site.snx
GAMIT station.info          output=site.station.info
Google Earth KMZ            output=site.kmz
SOPAC XML Site Log          output=site.xmllog
GSAC Sites info, JSON       output=site.json
GSAC Sites info, short csv  output=site.csv
GSAC Sites info, full csv   output=sitefull.csv
GSAC Sites info, Ops XML    output=siteops.xml

File Outputs
File HTML   output=file.html
Wget Script for FTP download    output=file.wget
File URLs list  output=file.url
File CSV    output=file.csv
File JSON   output=file.json
Zip Files   output=file.zip

(The terms output=... are the result format arguments in GSAC API queries.)

GSAC offers both a short csv (comma separated value) file formats with only 
site name and location, and a full csv file with lots of geodesy site data.
The GSAC plain text format is for quick visual inspection of the site values 
available (not intended for computer processing).

If you are satisfied with your GSAC repository offering these formats, 
you need do nothing about output format choices. Go to the next topic.

The choices of what to show in GSAC are set in the file gsac-code/src/org/gsac/gsl/SiteManager.java. 

You may very easily NOT offer some formats, if you don't want to offer them.  Comment out lines for handlers, in gsac/gsl/SiteManager.java,  NOT wanted your GSAC  repository.
For example if you do not want to provide the GSAC "Short csv" format, comment out (put // before) 
new TextSiteLogOutputHandler(getRepository(), getResourceClass()) in the file gsac-code/src/org/gsac/gsl/SiteManager.java. 

However you are encouraged to allow all the GSAC format choices, to show consistent results with other GSACs and in Federated GSAC collections.
There is no harm in offering all the choices .  Even if you do not see much use in some format, others may be expecting it from a GSAC service.

To conform with other GSAC repositories it may be good not to revise any GSAC-supplied output format.  
For GSAC bug reports and suggested improvements about formats please contact UNAVCO.

You could, alternately, make a new and similar but altered 
handler .java class for your use.  Add its call to the class file SiteManager.java and rebuild GSAC.  Do not commit your core 
GSAC code changes in thsi case into GSAC without consulting UNAVCO.

Please do *not* do svn commit into SourceForge for any modified SiteManager.java file or output handler, if you have SourceForge write permission.

GSAC does not promote, endorse, deprecate or modify file formats (except possibly for changes to GSAC's own formats).  
If there is another format which you think GSAC should offer, you can contact UNAVCO 
to add it to GSAC code.  

You can create a new "OutputHandler" Java class and use it yourself or submit it to UNAVCO to add to GSAC.
You create a new kind of format by writing a new Java class, similar to any of the above output handlers.
The Java output handler source files are in gsac-code/src/org/gsac/gsl/output/site/.  You can use the current output handler classes as
guides to what is needed in a similar Java class.  Remember to call it in gsl/SiteManager.java and rebuild everything.

GSAC code assumes station height values are ellipsoid heights above a geoid model surface, in meters. 

########################################################################
########################################################################

